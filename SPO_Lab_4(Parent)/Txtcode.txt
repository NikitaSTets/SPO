#include <iostream>
#include <conio.h>
#include <stdio.h>
#include <Windows.h>
#include <string>
#include <thread>
#define CountOfThreads 10
int number = 0;
using namespace std;
CRITICAL_SECTION cs;
HANDLE* handles;
HANDLE c;
wchar_t* cw(const char *arry)
{
	wchar_t *w_s = new wchar_t[4096];
	MultiByteToWideChar(CP_ACP, 0, arry, -1, w_s, 4096);
	return w_s;
}

int AddHandle(HANDLE h1, int size)
{
	size++;
	HANDLE* handles2 = new HANDLE[size + 1];
	for (size_t i = 0; i < size - 1; i++)
	{
		handles2[i] = handles[i];
	}
	handles2[size - 1] = h1;
	handles = handles2;
	return size;
}
void foo(int id)
{
	try{
		while (id<number) {
			EnterCriticalSection(&cs);
			for (size_t i = 0; i < 5; i++)
			{
				cout << "foo " << id << endl;
				Sleep(1000);
			}
			LeaveCriticalSection(&cs);
			Sleep(2000);
		}
	}
	catch (...)
	{
		cout << "Thread deleted" << id << endl;
	}
	ExitThread(0);
}
// DWORD  ThreadProc(CONST LPVOID lpParam) {
//	 const char *str = (CONST char*)lpParam;
//	
//		 while (1) {
//			 EnterCriticalSection(&cs);
//			 for (size_t i = 0; i < 3; i++)
//			 {
//				 printf_s("%s\n", str);
//
//				 // Sleep(1000);
//			 }
//			 LeaveCriticalSection(&cs);
//			 Sleep(5000);
//		 }
//	
//	DWORD i;
//	ExitThread(0);
//}
 
void main()
{
	InitializeCriticalSection(&cs);
	UINT u = 0;
	int size = 0;
	thread threadArray[CountOfThreads];
	HANDLE handle;
	char ch;
	string str = "Thread Number";
	string str1;
    str1 = str + to_string(number);

	/*thread t1(foo, 1);
	t1.~thread();*/
 	while (1)
	{
		ch = _getch();
		if (ch == 'q')
		{
			DeleteCriticalSection(&cs);
			exit(0);
		}
		if (ch == '+')
		{
			if (number < CountOfThreads)
			{
				number++;
				threadArray[number-1]=thread(foo,number-1);
				threadArray[number - 1].detach();
			}
			//handle = NULL;
			//str1 =str + to_string(number);
			////handle = CreateThread(NULL, 256, &ThreadProc, (CONST LPVOID)str1.c_str(), 0, NULL);
			//if (handle != NULL) {
			//	OutputDebugString(cw("Success"));
			//	size = AddHandle(handle, size);
			//}
			//else {
			//	OutputDebugString(cw("Failed"));
			//	printf_s("Error");
			//}
		}
		if (ch == '-')
		{
			/*CloseHandle(&handles[size - 1]);
			TerminateThread(&handles[size - 1],u);
			size--;*/
			
		//	TerminateThread(&threadArray[number - 1], u);
			number--;
			threadArray[number].~thread();
			//threadArray[number] =  thread(foo,number);
		}
	}
	_getch();
}